{"version":3,"sources":["src/util/index.ts","src/model/color.ts","src/model/shape.ts","src/model/piece.ts","src/model/board.ts","src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kBAAyB,IAAiB,EAAE,OAAe;IACzD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QACnB,IAAI,CAAC,SAAS,IAAI,GAAG,GAAG,OAAO,CAAA;IACjC,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,IAAI,CAAC,SAAS,GAAG,OAAO,CAAA;IAC1B,CAAC;AACH,CAAC;AAND,4BAMC;AAED,oBAA2B,CAAS,EAAE,CAAS,EAAE,GAA6B,EAAE,IAAY;IAC1F,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;IAC5C,IAAM,EAAE,GAAG,GAAG,CAAC,WAAW,CAAA;IAC1B,GAAG,CAAC,WAAW,GAAG,SAAS,CAAA;IAC3B,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;IAC9C,GAAG,CAAC,WAAW,GAAG,EAAE,CAAA;AACtB,CAAC;AAND,gCAMC;;;;;ACdD,IAAY,MAEX;AAFD,WAAY,MAAM;IAChB,iCAAO,CAAA;IAAE,mCAAI,CAAA;IAAE,qCAAK,CAAA;IAAE,qCAAK,CAAA;IAAE,uCAAM,CAAA;IAAE,mCAAI,CAAA;IAAE,uCAAM,CAAA;AACnD,CAAC,EAFW,MAAM,GAAN,cAAM,KAAN,cAAM,QAEjB;;;;;ACKD;IAKE,mBAAY,IAAmB,EAAE,QAAY;QAAZ,yBAAA,EAAA,YAAY;QAC3C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,KAAK,GAAG,cAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IAC1C,CAAC;IACH,gBAAC;AAAD,CAVA,AAUC,IAAA;AAVY,8BAAS;AAYtB,IAAY,aAQX;AARD,WAAY,aAAa;IACvB,qDAAU,CAAA;IACV,iDAAI,CAAA;IACJ,2CAAC,CAAA;IACD,2CAAC,CAAA;IACD,2CAAC,CAAA;IACD,2CAAC,CAAA;IACD,2CAAC,CAAA;AACH,CAAC,EARW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAQxB;AAED;;;GAGG;AACU,QAAA,MAAM;IACjB,GAAC,aAAa,CAAC,MAAM,IAAG;QACtB;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACJ;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACJ;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACJ;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACJ;KACX;IACD,GAAC,aAAa,CAAC,IAAI,IAAG;QACpB;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACJ;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACJ;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACJ;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACJ;KACX;IACD,GAAC,aAAa,CAAC,CAAC,IAAG;QACjB;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;KACX;IACD,GAAC,aAAa,CAAC,CAAC,IAAG;QACjB;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;KACX;IACD,GAAC,aAAa,CAAC,CAAC,IAAG;QACjB;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;KACX;IACD,GAAC,aAAa,CAAC,CAAC,IAAG;QACjB;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;KACX;IACD,GAAC,aAAa,CAAC,CAAC,IAAG;QACjB;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;QACV;YACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACD;KACX;QACF;AAED;;;GAGG;AACU,QAAA,MAAM;IACjB,GAAC,aAAa,CAAC,MAAM,IAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,GAAC,aAAa,CAAC,IAAI,IAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,GAAC,aAAa,CAAC,CAAC,IAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,GAAC,aAAa,CAAC,CAAC,IAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,GAAC,aAAa,CAAC,CAAC,IAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,GAAC,aAAa,CAAC,CAAC,IAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,GAAC,aAAa,CAAC,CAAC,IAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACzD;;;;;;AClND,iCAAsD;AACtD,iCAAgC;AAChC,gCAAoC;AAEpC;IAUE,eAAY,IAAmB,EAAE,UAAkB,EAAE,GAA6B,EAAE,IAAY;QAC9F,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,KAAK,GAAG,cAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAA;QACjB,IAAI,CAAC,KAAK,GAAG,cAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAE7C,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAA,CAAC,IAAI;QAClB,IAAI,CAAC,GAAG,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI;QACpE,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IAClB,CAAC;IAEM,oBAAI,GAAX;QACE,IAAI,CAAC,IAAI,CAAC,cAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;IAC9B,CAAC;IAEM,qBAAK,GAAZ;QACE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACpB,CAAC;IAEO,oBAAI,GAAZ,UAAa,SAAiB;QAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC3B,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;oBACb,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,SAAS,CAAA;oBAC9B,iBAAU,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA;gBAC7D,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAEM,oBAAI,GAAX;QACE,IAAI,CAAC,KAAK,EAAE,CAAA;QACZ,IAAI,CAAC,GAAG,EAAE,CAAA;QACV,IAAI,CAAC,IAAI,EAAE,CAAA;IACb,CAAC;IAEM,qBAAK,GAAZ;QACE,IAAI,CAAC,KAAK,EAAE,CAAA;QACZ,IAAI,CAAC,GAAG,EAAE,CAAA;QACV,IAAI,CAAC,IAAI,EAAE,CAAA;IACb,CAAC;IAEM,oBAAI,GAAX;QACE,IAAI,CAAC,KAAK,EAAE,CAAA;QACZ,IAAI,CAAC,GAAG,EAAE,CAAA;QACV,IAAI,CAAC,IAAI,EAAE,CAAA;IACb,CAAC;IAEM,sBAAM,GAAb;QACE,IAAI,CAAC,KAAK,EAAE,CAAA;QACZ,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;QACvC,IAAI,CAAC,KAAK,GAAG,cAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAC7C,IAAI,CAAC,IAAI,EAAE,CAAA;IACb,CAAC;IACH,YAAC;AAAD,CAlEA,AAkEC,IAAA;AAlEY,sBAAK;;;;;ACHlB,gCAA8C;AAC9C,iCAAgC;AAChC,iCAAgC;AAMhC;IASE,eAAY,SAA4B,EAAE,KAAU,EAAE,MAAW;QAAvB,sBAAA,EAAA,UAAU;QAAE,uBAAA,EAAA,WAAW;QAC/D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;QAC1B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAA6B,CAAA;QAEtE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAA;QAClB,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAA;QACnD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAA;QACrD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAA;IAC7B,CAAC;IAEM,oBAAI,GAAX;QACE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACrC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAEtB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA;gBAEjB,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,cAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAA;gBACtD,iBAAU,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;YAC3C,CAAC;QACH,CAAC;IACH,CAAC;IAEM,8BAAc,GAArB,UAAsB,KAAoB;QACxC,IAAI,CAAC,WAAW,GAAG,IAAI,aAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;IAC1E,CAAC;IAEM,yBAAS,GAAhB;QACE,yCAAyC;QACzC,oCAAoC;QACpC,yCAAyC;QACzC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAA;IACzB,CAAC;IAEM,8BAAc,GAArB;QACE,IAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,KAAK,CAAC,EAAR,CAAQ,CAAC,CAAA;QACxE,IAAM,cAAc,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAA;QAE3C,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACnB,MAAM,CAAA;QACR,CAAC;QAED,IAAI,KAAK,GAAG,EAAE,CAAA;QACd,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACf,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA;QACf,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAC1B,CAAC;IAEO,wBAAQ,GAAhB;QACE,IAAI,IAAI,GAAG,EAAE,CAAA;QACb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACrC,IAAI,KAAK,GAAG,EAAE,CAAA;YACd,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACf,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAClB,CAAC;QAED,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IACH,YAAC;AAAD,CA1EA,AA0EC,IAAA;AA1EY,sBAAK;;;;;ACTlB,uCAAqC;AACrC,uCAA8C;AAE9C;IAOE,gBAAY,SAA4B;QACtC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QACtC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA;QACb,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAA;QACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;IACtB,CAAC;IAEM,sBAAK,GAAZ;QACE,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;IACjD,CAAC;IAEO,yBAAQ,GAAhB;IAEA,CAAC;IAEO,yBAAQ,GAAhB,UAAiB,SAAc;QAC7B,EAAE,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnD,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;YAC/C,MAAM,CAAA;QACR,CAAC;QACD,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAA;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,qBAAa,CAAC,MAAM,CAAC,CAAA;YAC/C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;QACvB,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;QACjB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAA;QAEtB,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;IACjD,CAAC;IACH,aAAC;AAAD,CAvCA,AAuCC,IAAA;AAED,IAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAsB,CAAA;AACtE,IAAM,IAAI,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,CAAA;AAClC,IAAI,CAAC,KAAK,EAAE,CAAA","file":"37b3b555bd92e05828ed5f1dc323386e.map","sourcesContent":["export function addClass(node: HTMLElement, classes: string) {\n  if (node.className) {\n    node.className += \" \" + classes\n  } else {\n    node.className = classes\n  }\n}\n\nexport function drawSquare(x: number, y: number, ctx: CanvasRenderingContext2D, size: number) {\n  ctx.fillRect(x * size, y * size, size, size)\n  const ss = ctx.strokeStyle\n  ctx.strokeStyle = \"#222222\"\n  ctx.strokeRect(x * size, y * size, size, size)\n  ctx.strokeStyle = ss\n}","export enum Colors {\n  red = 1, blue, green, brown, purple, aqua, orange\n}","// min of 3x3, can be larger\nexport interface Shape extends Array<number[]> {\n  0: [number, number, number]\n  1: [number, number, number]\n  2: [number, number, number]\n}\n\nexport class Tetromino {\n  shape: Shape\n  type: TetrominoType\n  rotation: number\n\n  constructor(type: TetrominoType, rotation = 0) {\n    this.type = type\n    this.rotation = rotation\n    this.shape = Shapes[type][this.rotation]\n  }\n}\n\nexport enum TetrominoType {\n  SQUARE = 1,\n  LINE,\n  L,\n  J,\n  T,\n  S,\n  Z\n}\n\n/**\n * Each shape is stored in a 5x5 array because the 4x4 piece moves when rotated.\n * Each rotation of the shape is stored in each object.\n */\nexport const Shapes = {\n  [TetrominoType.SQUARE]: [\n    [\n      [0, 0, 0, 0],\n      [0, 1, 1, 0],\n      [0, 1, 1, 0],\n      [0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0],\n      [0, 1, 1, 0],\n      [0, 1, 1, 0],\n      [0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0],\n      [0, 1, 1, 0],\n      [0, 1, 1, 0],\n      [0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0],\n      [0, 1, 1, 0],\n      [0, 1, 1, 0],\n      [0, 0, 0, 0],\n    ] as Shape,\n  ],\n  [TetrominoType.LINE]: [\n    [\n      [0, 0, 0, 0],\n      [2, 2, 2, 2],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 2, 0],\n      [0, 0, 2, 0],\n      [0, 0, 2, 0],\n      [0, 0, 2, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [2, 2, 2, 2],\n      [0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 2, 0, 0],\n      [0, 2, 0, 0],\n      [0, 2, 0, 0],\n      [0, 2, 0, 0],\n    ] as Shape\n  ],\n  [TetrominoType.L]: [\n    [\n      [0, 0, 3],\n      [3, 3, 3],\n      [0, 0, 0]\n    ] as Shape,\n    [\n      [0, 3, 0],\n      [0, 3, 0],\n      [0, 3, 3]\n    ] as Shape,\n    [\n      [0, 0, 0],\n      [3, 3, 3],\n      [3, 0, 0]\n    ] as Shape,\n    [\n      [3, 3, 0],\n      [0, 3, 0],\n      [0, 3, 0]\n    ] as Shape\n  ],\n  [TetrominoType.J]: [\n    [\n      [4, 0, 0],\n      [4, 4, 4],\n      [0, 0, 0]\n    ] as Shape,\n    [\n      [0, 4, 4],\n      [0, 4, 0],\n      [0, 4, 0]\n    ] as Shape,\n    [\n      [0, 0, 0],\n      [4, 4, 4],\n      [0, 0, 4]\n    ] as Shape,\n    [\n      [0, 4, 0],\n      [0, 4, 0],\n      [4, 4, 0]\n    ] as Shape\n  ],\n  [TetrominoType.S]: [\n    [\n      [0, 5, 5],\n      [5, 5, 0],\n      [0, 0, 0]\n    ] as Shape,\n    [\n      [0, 5, 0],\n      [0, 5, 5],\n      [0, 0, 5]\n    ] as Shape,\n    [\n      [0, 0, 0],\n      [0, 5, 5],\n      [5, 5, 0]\n    ] as Shape,\n    [\n      [5, 0, 0],\n      [5, 5, 0],\n      [0, 5, 0]\n    ] as Shape\n  ],\n  [TetrominoType.Z]: [\n    [\n      [6, 6, 0],\n      [0, 6, 6],\n      [0, 0, 0]\n    ] as Shape,\n    [\n      [0, 0, 6],\n      [0, 6, 6],\n      [0, 6, 0]\n    ] as Shape,\n    [\n      [0, 0, 0],\n      [6, 6, 0],\n      [0, 6, 6]\n    ] as Shape,\n    [\n      [0, 6, 0],\n      [6, 6, 0],\n      [6, 0, 0]\n    ] as Shape\n  ],\n  [TetrominoType.T]: [\n    [\n      [0, 7, 0],\n      [7, 7, 7],\n      [0, 0, 0]\n    ] as Shape,\n    [\n      [0, 7, 0],\n      [0, 7, 7],\n      [0, 7, 0]\n    ] as Shape,\n    [\n      [0, 0, 0],\n      [7, 7, 7],\n      [0, 7, 0]\n    ] as Shape,\n    [\n      [0, 7, 0],\n      [7, 7, 0],\n      [0, 7, 0]\n    ] as Shape\n  ]\n}\n\n/**\n * Relative coordinates of starting point for each shape\n * [hor, vert] i.e. [2, 1] means move left 2, up 1\n */\nexport const Offset = {\n  [TetrominoType.SQUARE]: [[1, 2], [1, 2], [1, 2], [1, 2]],\n  [TetrominoType.LINE]:   [[1, 2], [2, 1], [0, 2], [2, 0]],\n  [TetrominoType.L]:      [[1, 1], [0, 2], [0, 1], [0, 1]],\n  [TetrominoType.J]:      [[0, 1], [1, 1], [2, 1], [1, 2]],\n  [TetrominoType.S]:      [[1, 1], [0, 2], [0, 1], [0, 1]],\n  [TetrominoType.Z]:      [[1, 1], [0, 2], [0, 1], [0, 1]],\n  [TetrominoType.T]:      [[1, 1], [0, 2], [0, 1], [0, 1]],\n}","import { TetrominoType, Shape, Shapes } from './shape'\nimport { Colors } from './color'\nimport { drawSquare } from '../util'\n\nexport class Piece {\n  type: TetrominoType\n  rotation: number\n  shape: Shape\n  row: number\n  col: number\n  color: string\n  ctx: CanvasRenderingContext2D\n  size: number\n\n  constructor(type: TetrominoType, boardWidth: number, ctx: CanvasRenderingContext2D, size: number) {\n    this.type = type\n    this.color = Colors[this.type]\n    this.rotation = 0\n    this.shape = Shapes[this.type][this.rotation]\n\n    this.row = -2 // y\n    this.col = (boardWidth / 2) - Math.ceil(this.shape.length / 2); // x\n    this.ctx = ctx\n    this.size = size\n  }\n\n  public draw() {\n    this.fill(Colors[this.type])\n  }\n\n  public clear() {\n    this.fill(\"white\")\n  }\n\n  private fill(fillstyle: string) {\n    for (let r = 0; r < this.shape.length; r++) {\n      for (let c = 0; c < this.shape.length; c++) {\n        let cell = this.shape[c][r]\n        if (cell > 0) {\n          this.ctx.fillStyle = fillstyle\n          drawSquare(this.col + c, this.row + r, this.ctx, this.size)\n        }\n      }\n    }\n  }\n\n  public left() {\n    this.clear()\n    this.col--\n    this.draw()\n  }\n\n  public right() {\n    this.clear()\n    this.col++\n    this.draw()\n  }\n\n  public down() {\n    this.clear()\n    this.row++\n    this.draw()\n  }\n\n  public rotate() {\n    this.clear()\n    this.rotation = (this.rotation + 1) % 4\n    this.shape = Shapes[this.type][this.rotation]\n    this.draw()\n  }\n}","import { TetrominoType, Shape, Shapes, Offset } from './shape'\nimport { addClass, drawSquare } from '../util'\nimport { Colors } from './color'\nimport { Piece } from './piece';\n\n// For now, equivalent to number[][] but may introduce stricter typing\n// i.e. [22][10], 22 rows of width 10\nexport interface BoardGrid extends Array<Array<number>> {}\n\nexport class Board {\n  grid: BoardGrid\n  width: number\n  height: number\n  container: HTMLCanvasElement\n  ctx: CanvasRenderingContext2D\n  tileSize: number // in px\n  activePiece: Piece\n  \n  constructor(container: HTMLCanvasElement, width = 10, height = 20) {\n    this.width = width\n    this.height = height\n    this.container = container\n    this.ctx = this.container.getContext('2d') as CanvasRenderingContext2D\n\n    this.tileSize = 32\n    this.container.width = (this.width * this.tileSize)\n    this.container.height = (this.height * this.tileSize)\n    this.grid = this.initGrid()\n  }\n\n  public draw() {\n    for (let r = 0; r < this.height; r++) {\n      let row = this.grid[r]\n      \n      for (let c = 0; c < this.width; c++) {\n        let cell = row[c]\n\n        this.ctx.fillStyle = cell > 0 ? Colors[cell] : \"white\"\n        drawSquare(c, r, this.ctx, this.tileSize)\n      }\n    }\n  }\n\n  public setActivePiece(shape: TetrominoType) {\n    this.activePiece = new Piece(shape, this.width, this.ctx, this.tileSize)\n  }\n\n  public drawPiece() {\n    // const hOffset = ((this.width / 2) - 2)\n    // const t = Shapes[shape][rotation]\n    // const offset = Offset[shape][rotation]\n    this.activePiece.draw()\n  }\n\n  public shiftBoardDown() {\n    const bottomRow = this.grid[this.grid.length - 1].filter(el => el !== 0)\n    const shouldNotShift = bottomRow.length > 0\n\n    if (shouldNotShift) {\n      return\n    }\n\n    let cells = []\n    for (let c = 0; c < this.width; c++) {\n      cells.push(0)\n    }\n\n    this.grid.pop()\n    this.grid.unshift(cells)\n  }\n\n  private initGrid(): BoardGrid {\n    let rows = []\n    for (let r = 0; r < this.height; r++) {\n      let cells = []\n      for (let c = 0; c < this.width; c++) {\n        cells.push(0)\n      }\n      rows.push(cells)\n    }\n\n    return rows\n  }\n}","import { Board } from './model/board'\nimport { TetrominoType } from './model/shape';\n\nclass Tetris {\n  board: Board\n  step: number\n  lastTime: number\n  container: HTMLCanvasElement\n  newPiece: boolean\n\n  constructor(container: HTMLCanvasElement) {\n    this.container = container\n    this.board = new Board(this.container)\n    this.step = 1\n    this.lastTime = 0\n    this.newPiece = true\n  }\n\n  public start() {\n    requestAnimationFrame(this.gameLoop.bind(this))\n  }\n\n  private getInput() {\n    \n  }\n\n  private gameLoop(timestamp: any) {\n    if (timestamp < this.lastTime + (1000 / this.step)) {\n      requestAnimationFrame(this.gameLoop.bind(this))\n      return\n    }\n    this.lastTime = timestamp\n    if (this.newPiece) {\n      this.board.setActivePiece(TetrominoType.SQUARE)\n      this.newPiece = false\n    }\n\n    this.board.draw()\n    this.board.drawPiece()\n    \n    requestAnimationFrame(this.gameLoop.bind(this))\n  }\n}\n\nconst container = document.getElementById(\"game\") as HTMLCanvasElement\nconst game = new Tetris(container)\ngame.start()"]}
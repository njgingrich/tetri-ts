{"version":3,"sources":["src/model/shape.ts","src/util/index.ts","src/model/board.ts","src/index.ts"],"names":[],"mappings":"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","file":"37b3b555bd92e05828ed5f1dc323386e.map","sourcesContent":["export type Row = [number, number, number, number, number];\n\nexport interface Shape extends Array<Row> {\n  0: [number, number, number, number, number]\n  1: [number, number, number, number, number]\n  2: [number, number, number, number, number]\n  3: [number, number, number, number, number]\n  4: [number, number, number, number, number]\n}\n\nexport class Tetromino {\n  shape: Shape\n  type: TetrominoType\n  rotation: number\n\n  constructor(type: TetrominoType, rotation = 0) {\n    this.type = type\n    this.rotation = rotation\n    this.shape = Shapes[type][this.rotation]\n  }\n}\n\nexport enum TetrominoType {\n  SQUARE = 1,\n  LINE,\n  L,\n  J,\n  T,\n  S,\n  Z\n}\n\n/**\n * Each shape is stored in a 5x5 array because the 4x4 piece moves when rotated.\n * Each rotation of the shape is stored in each object.\n */\nexport const Shapes = {\n  [TetrominoType.SQUARE]: [\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n  ],\n  [TetrominoType.LINE]: [\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 1, 1, 1, 1],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [1, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n  ],\n  [TetrominoType.L]: [\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 1, 1, 1, 0],\n      [0, 1, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 1, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 1, 0],\n      [0, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n  ],\n  [TetrominoType.J]: [\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 1, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 1, 0, 0, 0],\n      [0, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 1, 1, 1, 0],\n      [0, 0, 0, 1, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n  ],\n  [TetrominoType.S]: [\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 0, 1, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 1, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 1, 0, 0, 0],\n      [0, 1, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 1, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n  ],\n  [TetrominoType.Z]: [\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 1, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 1, 1, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 1, 1, 0, 0],\n      [0, 1, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 1, 1, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n  ],\n  [TetrominoType.T]: [\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n      [0, 1, 1, 1, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 1, 1, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n    [\n      [0, 0, 0, 0, 0],\n      [0, 0, 1, 0, 0],\n      [0, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0],\n    ] as Shape,\n  ]\n}\n\n/**\n * Relative coordinates of starting point for each shape\n * [hor, vert] i.e. [2, 1] means move left 2, up 1\n */\nexport const Offset = {\n  [TetrominoType.SQUARE]: [[1, 2], [1, 2], [1, 2], [1, 2]],\n  [TetrominoType.LINE]:   [[1, 2], [2, 1], [0, 2], [2, 0]],\n  [TetrominoType.L]:      [[1, 1], [0, 2], [0, 1], [0, 1]],\n  [TetrominoType.J]:      [[0, 1], [1, 1], [2, 1], [1, 2]],\n  [TetrominoType.S]:      [[1, 1], [0, 2], [0, 1], [0, 1]],\n  [TetrominoType.Z]:      [[1, 1], [0, 2], [0, 1], [0, 1]],\n  [TetrominoType.T]:      [[1, 1], [0, 2], [0, 1], [0, 1]],\n}","export function addClass(node: HTMLElement, classes: string) {\n  if (node.className) {\n    node.className += \" \" + classes\n  } else {\n    node.className = classes\n  }\n}","import { TetrominoType, Shape, Shapes, Offset } from './shape'\nimport { addClass } from '../util'\n\n// For now, equivalent to number[][] but may introduce stricter typing\n// i.e. [22][10], 22 rows of width 10\nexport interface BoardGrid extends Array<Array<number>> {}\n\nexport class Board {\n  grid: BoardGrid\n  width: number\n  height: number\n  \n  constructor(width = 10, height = 22) {\n    this.width = width\n    this.height = height\n\n    this.grid = this.initGrid()\n  }\n\n  public draw() {\n    const oldgame = document.getElementById(\"game\")\n    if (oldgame) document.body.removeChild(oldgame)\n    const container = document.createElement('div')\n    container.id = \"game\"\n    addClass(container, \"container\")\n\n    for (let r = 0; r < this.grid.length; r++) {\n      let row = this.grid[r]\n      let rowEl = document.createElement('div')\n      addClass(rowEl, \"row\")\n\n      for (let ix of row) {\n        const cell = document.createElement('div')\n        const minoName = ix > 0 ? TetrominoType[ix].toLowerCase() : \"\"\n\n        addClass(cell, `cell ${ix > 0 ? \"tetromino\" : \"\"} ${minoName}`)\n        rowEl.appendChild(cell)\n      }\n\n      container.appendChild(rowEl)\n    }\n\n    document.body.appendChild(container)\n  }\n\n  public insertShape(shape: TetrominoType, rotation: number = 0) {\n    const hOffset = ((this.width / 2) - 2)\n    const t = Shapes[shape][rotation]\n    const offset = Offset[shape][rotation]\n\n    for (let row = 0; row < 5; row++) {\n      for (let i = 0; i < 5; i++) {\n        let offsetRow = row + offset[1]\n        let offsetCell = i + offset[0]\n\n        if (offsetRow < 5 && offsetCell < 5) {\n          this.grid[row][i + hOffset] = t[offsetRow][offsetCell];\n        }\n      }\n    }\n  }\n\n  public shiftDown() {\n    const bottomRow = this.grid[this.grid.length - 1].filter(el => el !== 0)\n    const shouldNotShift = bottomRow.length > 0\n\n    if (shouldNotShift) {\n      return\n    }\n\n    let cells = []\n    for (let c = 0; c < this.width; c++) {\n      cells.push(0)\n    }\n\n    this.grid.pop()\n    this.grid.unshift(cells)\n  }\n\n  private initGrid(): BoardGrid {\n    let rows = []\n    for (let r = 0; r < this.height; r++) {\n      let cells = []\n      for (let c = 0; c < this.width; c++) {\n        cells.push(0)\n      }\n      rows.push(cells)\n    }\n\n    return rows\n  }\n}","import { Board } from './model/board'\nimport { TetrominoType } from './model/shape';\n\nclass Tetris {\n  board: Board\n  step: number\n  lastTime: number\n\n  constructor() {\n    this.board = new Board()\n    this.step = 1\n    this.lastTime = 0\n  }\n\n  public start() {\n    this.board.insertShape(TetrominoType.T)\n    requestAnimationFrame(this.gameLoop.bind(this))\n  }\n\n  private gameLoop(timestamp: any) {\n    if (timestamp < this.lastTime + (1000 / this.step)) {\n      requestAnimationFrame(this.gameLoop.bind(this))\n      return\n    }\n    this.lastTime = timestamp\n\n    this.board.draw()\n    this.board.shiftDown()\n    requestAnimationFrame(this.gameLoop.bind(this))\n  }\n\n  private createBoard() {\n\n  }\n}\n\nconst game = new Tetris()\ngame.start()"]}